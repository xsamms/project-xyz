// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agency {
  id            Int              @id @default(autoincrement())
  agencyName    String
  regNumber     String
  industry      String
  address       String
  state         String
  country       String
  user          User             @relation(fields: [userId], references: [id])
  userId        Int              @unique
  talent        Talent[]
  agencyManager Agency_Manager[]
}

model Agency_Manager {
  id       Int      @id @default(autoincrement())
  gender   String
  userId   Int      @unique
  user     User     @relation(fields: [userId], references: [id])
  agencyId Int      @unique
  agency   Agency   @relation(fields: [agencyId], references: [id])
  talent   Talent[]
}

model Manager {
  id         Int      @id @default(autoincrement())
  agencyName String
  regNumber  String
  industry   String
  address    String
  state      String
  country    String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique
  talent     Talent[]
}

model Talent {
  id              Int             @id @default(autoincrement())
  userId          Int             @unique
  agencyId        Int?            @unique
  managerId       Int?            @unique
  agencyManagerId Int?            @unique
  stageName       String          @unique
  industry        String
  bookingPrice    Int?
  user            User            @relation(fields: [userId], references: [id])
  agency          Agency?         @relation(fields: [agencyId], references: [id])
  manager         Manager?        @relation(fields: [managerId], references: [id])
  agencyManager   Agency_Manager? @relation(fields: [agencyManagerId], references: [id])
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model User {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  password         String
  fullName         String?
  mobileNumber     String?         @unique
  verificationType String?
  role             Role            @default(USER)
  isEmailVerified  Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Token            Token[]
  agency           Agency?
  manager          Manager?
  talent           Talent?
  agencyManager    Agency_Manager?
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
